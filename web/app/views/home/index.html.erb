<style>
    /* Стили для изображений */
    .square-image {
        width: 100px; /* Фиксированная ширина */
        height: 100px; /* Фиксированная высота */
        object-fit: cover; /* Масштабирование изображения, чтобы оно полностью заполняло заданную область */
    }
    .image-label {
        font-size: 16px;
        text-align: center;
        display: block;
        margin-top: 8px;
    }
    .fetch-button {
    display: block;
    margin: 10px auto;
    padding: 8px 16px;
    color: #fff;
    background-color: #007BFF; /* Bootstrap primary blue */
    border: none;
    border-radius: 4px;
    cursor: pointer;
	}

	.fetch-button:hover {
	    background-color: #0056b3;
	}
	.fetch-button:active {
    background-color: #004085; /* Darker blue when the button is actively pressed */
    opacity: 0.8;
}

</style>
<div>
  <div class="z-[-1] w-full h-screen static">
    <%#= image_tag "wave_figure.png", size:"816x728", class: "hidden md:block absolute z-[-1] w-bgp h-bgp inset-y-0 right-0 px-1 mr-24 " %>
    <div class="flex flex-col sm:flex-row justify-start items-center mx-4 sm:mx-24">
      <div class="py-4">
        <a href="/" class="font-sans text-2xl text-bright-deep-blue font-bold italic underline-offset-8 hover:underline">
          TrinityWeb
        </a>
      </div>
      <div class="py-4 px-10">
        <a href="/" class="font-sans  place-self-center text-l text-gray-500 font-semibold underline-offset-8 hover:underline">
          Vocabulary and grammar</a>
      </div>
    </div>
    <!-- page body -->
    <div class="flex flex-col items-center justify-center mt-32 space-y-16">
      <div class="text-bright-deep-blue font-bold text-6xl italic my-4">
        TrinityWeb
      </div>

      <div class="text-2xl md:text-4xl lg:text-3xl text-gray-500 font-bold my-2">
        Insert your article
      </div>

      <div class="flex flex-col items-center space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4 my-2">
        <input type="file" id="pdfFileInput" class="hidden" accept="application/pdf" onchange="uploadPDF()">
        <label for="pdfFileInput" class="cursor-pointer bg-bright-deep-blue text-white text-xl py-4 px-6 rounded-md hover:bg-blue-900 focus:outline-none transition-colors">Choose PDF</label>
      </div>
      <span id="uploadStatus" class="text-lg font-bold"></span>

      <div class="text-2xl md:text-3xl lg:text-2xl text-gray-500 font-bold">
        or
      </div>

      <form id="articleForm" action="${backendAddress}/web" method="GET" class="flex flex-col items-center w-2/3 max-w-lg my-4">
        <input type="text" name="request" placeholder="Insert article reference" class="w-full bg-gray-300 text-gray-700 text-lg rounded-md border-0 focus:outline-none px-4 py-3" required>
      </form>

      <a onclick="fetchCollocations()"
         class="bg-bright-deep-blue text-white text-xl py-4 px-6 rounded-md hover:border-gray-300 hover:bg-blue-900 focus:outline-none transition-colors cursor-pointer">
        Pull vocabulary
      </a>
      <div class="flex items-center justify-center mt-32 space-x-8">
<div>
    <img src="/assets/article.png" alt="Mechanic" class="square-image cursor-pointer">
    <button class="fetch-button" data-action="pdf1">Mechanic</button>
</div>

<div>
    <img src="/assets/article.png" alt="Literature" class="square-image cursor-pointer">
    <button class="fetch-button" data-action="pdf2">Philology</button>
</div>

<div>
    <img src="/assets/article.png" alt="Teachers" class="square-image cursor-pointer">
    <button class="fetch-button" data-action="pdf3">Embracing</button>
</div>



      </div>


      <div id="responseMessage" class="flex flex-col items-center space-y-8 w-2/3 max-w-lg text-lg text-green-600 font-bold mt-4"></div>
    </div>

  </div>
</div>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const buttons = document.querySelectorAll('.fetch-button');
    
    function handleInteraction(event) {
        event.preventDefault(); // Prevent iOS from handling this as a scroll or zoom gesture
        const action = event.target.getAttribute('data-action');
        fetchCollocationsHC(action);
    }

    buttons.forEach(button => {
        button.addEventListener('touchstart', handleInteraction, {passive: false});
        button.addEventListener('click', handleInteraction);
    });
});

</script>

<script>
    const backendAddress = 'https://backend.controlhome.keenetic.pro'
    let clientId;
    let currentFile;
    if (!document.cookie.includes('client_id')) {
        clientId = generateUniqueId();
        document.cookie = `client_id=${clientId}; path=/;`;
    } else {
        clientId = getClientIdFromCookie();
    }


    function generateUniqueId() {
        const randomNumber = Math.random().toString(36).substring(2, 8);
        const timestamp = new Date().getTime().toString(36);
        return randomNumber + timestamp;
    }

    function getClientIdFromCookie() {
        const cookieString = document.cookie;
        const cookies = cookieString.split('; ');
        for (const cookie of cookies) {
            const [name, value] = cookie.split('=');
            if (name === 'client_id') {
                return value;
            }
        }
    }

    function fetchCollocationsHC(pdf) {
        switch(pdf) {
            case 'pdf1':
                currentFile = '142ae6e8412bafe7981f901244eb2ca0b417cf2faf272519735c7e73f0e25232';
                break;
            case 'pdf2':
                currentFile = '1e61907e5537420b39afdc07ac6da5328de4ef40e2ad7b3ec321245bcd73b30c';
                break;
            case 'pdf3':
                currentFile = 'ee9de96c80fcd9eb160c6b85a32fb002da3b978aab8c9e364b6b1d41e8c8115e';
                break;
            default:
                console.log('Unknown PDF');
                break;
        }
        fetch(backendAddress + '/collocations', {
            method: 'GET',
            headers: {
            	'Content-Type': 'application/json',
                'hash': currentFile,
            }
        })
          .then(response => {
              return response.json();
          })
          .then(data => {
              console.log(data);
              renderCollocations(data);
          })
          .catch(error => console.error('Error fetching collocations:', error));
    }
    function fetchCollocations() {
        console.log(currentFile)
        console.log(clientId)
        fetch(backendAddress + '/collocations', {
            headers: {
                'hash': currentFile,
            }
        })
            .then(response => {
                return response.json();
            })
            .then(data => {
                console.log(data);
                renderCollocations(data);
            })
            .catch(error => console.error('Error fetching collocations:', error));
    }

    function renderCollocations(data) {
        const responseMessage = document.getElementById('responseMessage');
        responseMessage.innerHTML = '';
        const collocationsContainer = document.createElement('div');
        data.forEach(collocation => {
            const collocationElement = document.createElement('div');
            collocationElement.innerHTML = `
            <strong>${collocation.coloc}</strong><br>
            <strong>Количество упоминаний:</strong> ${collocation.count}<br>
            <strong>Перевод:</strong> ${collocation.translation}<br><br>
        `;
            collocationsContainer.appendChild(collocationElement);
        });
        responseMessage.appendChild(collocationsContainer);
    }

    function uploadPDF() {
        const input = document.getElementById('pdfFileInput');
        const file = input.files[0];
        const uploadStatus = document.getElementById('uploadStatus');
        if (!file) {
            console.error('No file selected');
            return;
        }
        const formData = new FormData();
        formData.append('file', file);
        fetch(backendAddress + '/upload-pdf', {
            method: 'POST',
            headers: {
                'X-Client-ID': clientId
            },
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    console.log('File uploaded successfully');
                    uploadStatus.textContent = 'File uploaded successfully';
                    uploadStatus.style.color = 'green';
                    return response.json();
                } else {
                    console.error('Failed to upload file');
                    uploadStatus.textContent = 'Failed to upload file';
                    uploadStatus.style.color = 'red';
                    throw new Error('Failed to upload file');
                }
            })
            .then(data => {
                currentFile = data.hash;
                console.log('Hash of uploaded file:', currentFile);
            })
            .catch(error => console.error('Error:', error));
    }
</script>

